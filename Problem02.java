import java.util.ArrayList;


public class EvenFibonacciNumbers {

/*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
	public static ArrayList<Integer> HoldNum = new ArrayList(); // <> is called diamond

	public static void main(String[] args) 
	{
		EvenFibonacciNumbers object = new EvenFibonacciNumbers();
		object.fibonacci();
		int total = 0;
	      for(int i = 0; i < HoldNum.size(); i++)
	      {
	          int sum = HoldNum.get(i) ;
	          total += sum;
	      }
	      System.out.println(total);

}
	
	public void fibonacci() 
	{
		boolean isPassed = false;
		int prev1 = 0;
		int prev2 = 1;
		while(isPassed == false)
	{
	
	if(isPassed == false)
	{
		int saveprev1 = prev1;
		prev1 = prev2;
		prev2 = prev1 + saveprev1;
		if ((prev1 & 1) ==0)
	{
		HoldNum.add(prev1);
	}
	}
		isPassed = check(prev1); 
    }
		return;
	}
	  


	public boolean check(int prev1)
	{
		final int hold = 4000000;
		if (prev1 < hold)
	{
			return false;
	}
		else
	{
		return true;
	}
	}
}
